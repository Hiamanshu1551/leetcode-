class Solution {
    public int trap(int[] height) {
        int N = height.length;
        int[] left = new int[N], right = new int[N];
        left[0] = height[0];
        right[N-1] = height[N-1];
        for(int i = 1; i < N; i++) {
            left[i] = Math.max(left[i-1], height[i]);
            int j = N - i - 1;
            right[j] = Math.max(right[j+1], height[j]);
        }
        int trappedWater = 0;
        for(int i = 0; i < N; i++) {
            trappedWater+= Math.min(left[i], right[i]) - height[i];
        }
        return trappedWater;
    }
}

// class Solution {
//     public int trap(int[] height) {
//         int[] lh=new int[height.length];
//         lh[0]=height[0];
//         for(int i=1;i<height.length;i++){
//             lh[i]=Math.max(height[i],lh[i-1]);
//        }
//        int[] rh=new int[height.length];
//        rh[height.length-1]=height[height.length-1];
//        for(int i=height.length-2;i>=0;i--){
//            rh[i]=Math.max(height[i],rh[i+1]);
//        }
//        int c=0;
//        for(int i=0;i<height.length;i++){
//           c= Math.min(lh[i],rh[i]);
//           c=c+(c-height[i]);
//        }
//        return c;
//     }
// }
