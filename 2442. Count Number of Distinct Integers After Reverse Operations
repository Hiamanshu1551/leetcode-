// class Solution {
//     public int countDistinctIntegers(int[] nums) {
        
//         int[] nums1=new int[nums.length];
//         for(int i=0;i<nums.length;i++){
//             int rev=0;
//             while(nums[i]>0){
                
//                 rev=(rev*10)+nums[i]%10;
//                 nums[i]=nums[i]/10;
//             }
//             nums[i]=rev;
//         }
//         int c=0;
//         for(int i=0;i<nums.length;i++){
//             if(nums[i]!=nums1[i]){
//                 c++;
//             }
//         }
//         return c;
        
//     }
// }
class Solution {
    public int countDistinctIntegers(int[] arr) {
        HashSet<Integer> hs = new HashSet<>();
 for(int i:arr){
           hs.add(i);
       }
        for (int i = 0; i < arr.length; i++) {
            int sum = 0;
            int n = arr[i];
            while (n > 0) {
                int r = n % 10;
                sum = r + (sum * 10);
                n = n / 10;
            }
          hs.add(sum);
        }
        return hs.size();
    }
}
